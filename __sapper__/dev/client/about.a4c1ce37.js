import { z as writable, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, b as space, t as text, h as claim_element, j as children, g as claim_space, k as claim_text, c as detach_dev, l as attr_dev, m as add_location, p as insert_dev, r as append_dev, N as listen_dev, y as set_data_dev, u as noop, O as run_all, P as bubble, A as validate_each_argument, B as validate_store, C as component_subscribe, n as navStore, o as onDestroy, f as fade, F as Footer, Q as globals, R as is_function, D as create_component, E as claim_component, G as mount_component, H as transition_in, I as transition_out, J as destroy_component, q as query_selector_all, K as check_outros, w as add_render_callback, x as create_in_transition, L as destroy_each, M as group_outros } from './client.4954f97f.js';

const aboutData = writable([
  {
    name: 'Jaclyn Daake',
    nameOnModal: 'Jaclyn Daake, Partner',
    phone: '(308) 928-2165',
    email: ' jndaake@gmail.com',
    img: './images/jaclyn.jpg',
    modalName: 'jaclyn',
    linkedin: 'https://www.linkedin.com/in/jaclyncannaday/',
    bio1:
      'Jaclyn is the newest partner to the firm. She specializes in Litigation, Family Law, and Real Estate.',
    bio2:
      'Jaclyn was born and raised in Texas, graduating from Schreiner University in 2009 with a B.A. in Political Science. After a stint in the workforce as a summer camp director, Jaclyn pursued her Juris Doctorate at Washburn University School of Law in Topeka, Kansas.  There, she competed on multiple trial advocacy teams, eventually graduating with a Certificate in Advocacy with Distinction in December 2013. Since becoming an attorney, Jaclyn has served a variety of roles with the Nebraska State Bar Association and was named Nebraskaâ€™s Outstanding Young Lawyer in 2015.',
    bio3:
      'Jaclyn lives in Alma, Nebraska with her husband (also a lawyer!) and three sons. In her spare time, she enjoys camping, kayaking, playing board games, and visiting her family in the South.',
  },
  {
    name: 'Henry Schenker',
    nameOnModal: 'Henry C. Schenker, Partner',
    phone: '(308) 425-6273',
    email: 'henry.schenker@gmail.com',
    img: './images/henry.jpg',
    modalName: 'henry',
    linkedin: '',
    bio1:
      'Henry has been practicing since 2011.  He specializes in Estate Planning, Probate, and Agricultural Law. Henry is also a licensed real estate broker in the State of Nebraska and owns and operates Farm & Ranch Land Brokers, L.L.C.',
    bio2:
      'Henry is originally from Pennsylvania and grew up playing classical piano. As an active outdoorsman in the woods of the Northeast, he earned his Eagle Scout award at the age of 16. Henry went on to obtain a B.A. in Business and French from Lake Forest College in Illinois and his Juris Doctorate from the University of South Carolina.',
    bio3:
      'Henry lives in Hildreth, Nebraska with his wife and blue heeler dog.  In his spare time, he enjoys playing the piano, riding horses, and enjoying the beautiful Nebraska outdoors.',
  },
  {
    name: 'Douglas R. Walker',
    nameOnModal: 'Douglas R. Walker, Partner',
    phone: '(308) 928-2165',
    email: 'ddjwlaw@yahoo.com',
    img: './images/doug.jpg',
    modalName: 'doug',
    linkedin: '',
    bio1:
      'Doug has been practicing since 1982. He specializes in Estate Planning and Probate. Doug also serves as municipal attorney for a wide variety of local cities and villages.',
    bio2:
      'Doug has resided in Nebraska his entire life, being raised in Harlan County and receiving both his B.S. in Agriculture and his Juris Doctorate from the University of Nebraska Lincoln.',
    bio3:
      'Doug lives in Alma, Nebraska but splits his workdays between our Alma, Oxford, and Hildreth offices. In his spare time, he is an unwavering volunteer at his church and dedicated fan of all Nebraska Cornhusker sports teams.',
  },
  {
    name: 'Patrick A. Duncan',
    nameOnModal: 'Patrick A. Duncan, Of Counsel',
    phone: '',
    email: '',
    img: './images/patrick.jpg',
    modalName: 'pat',
    bio1:
      'Pat was admitted to practice law in 1974. During his time as a practitioner, he served a wide variety of clients in just as many different areas of law with honesty, integrity, and a sense of humor.',
    bio2:
      'Pat left full-time practice in June 2015, but still consults on cases, prepares tax returns, and assists the firm with research and client contact. He and his wife, Carol, now reside in Lincoln, Nebraska, and together they spend every chance they get with their nine grandchildren.',
    bio3: '',
  },
]);

/* src/components/Card.svelte generated by Svelte v3.24.1 */

const file = "src/components/Card.svelte";

// (82:10) {:else}
function create_else_block_1(ctx) {
	let span;
	let t0;
	let t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = space();
			t1 = text(/*phone*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {
				"uk-icon": true,
				title: true,
				class: true
			});

			children(span).forEach(detach_dev);
			t0 = claim_space(nodes);
			t1 = claim_text(nodes, /*phone*/ ctx[2]);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "uk-icon", "icon: receiver");
			attr_dev(span, "title", "Phone");
			attr_dev(span, "class", "svelte-1vzim64");
			add_location(span, file, 82, 12, 1518);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*phone*/ 4) set_data_dev(t1, /*phone*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(82:10) {:else}",
		ctx
	});

	return block;
}

// (79:10) {#if name == 'Patrick A. Duncan'}
function create_if_block_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("\n            Of Counsel");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { "uk-icon": true, class: true });
			children(span).forEach(detach_dev);
			t = claim_text(nodes, "\n            Of Counsel");
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "uk-icon", "icon: more-vertical");
			attr_dev(span, "class", "svelte-1vzim64");
			add_location(span, file, 79, 12, 1426);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(79:10) {#if name == 'Patrick A. Duncan'}",
		ctx
	});

	return block;
}

// (90:10) {:else}
function create_else_block(ctx) {
	let span;
	let t0;
	let a;
	let t1;
	let a_href_value;

	const block = {
		c: function create() {
			span = element("span");
			t0 = space();
			a = element("a");
			t1 = text(/*email*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {
				"uk-icon": true,
				title: true,
				class: true
			});

			children(span).forEach(detach_dev);
			t0 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, /*email*/ ctx[3]);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "uk-icon", "icon: mail");
			attr_dev(span, "title", "Email");
			attr_dev(span, "class", "svelte-1vzim64");
			add_location(span, file, 90, 12, 1756);
			attr_dev(a, "href", a_href_value = "mailto:" + /*email*/ ctx[3]);
			add_location(a, file, 91, 12, 1812);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*email*/ 8) set_data_dev(t1, /*email*/ ctx[3]);

			if (dirty & /*email*/ 8 && a_href_value !== (a_href_value = "mailto:" + /*email*/ ctx[3])) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(90:10) {:else}",
		ctx
	});

	return block;
}

// (88:10) {#if name == 'Patrick A. Duncan'}
function create_if_block(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { "uk-icon": true, class: true });
			children(span).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "uk-icon", "icon: more-vertical");
			attr_dev(span, "class", "svelte-1vzim64");
			add_location(span, file, 88, 12, 1687);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(88:10) {#if name == 'Patrick A. Duncan'}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let div6;
	let header;
	let img;
	let img_src_value;
	let t0;
	let div0;
	let h4;
	let t1;
	let t2;
	let div5;
	let div4;
	let div1;
	let t3;
	let div2;
	let t4;
	let div3;
	let span;
	let span_title_value;
	let t5;
	let a;
	let t6;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*name*/ ctx[0] == "Patrick A. Duncan") return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*name*/ ctx[0] == "Patrick A. Duncan") return create_if_block;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);

	const block = {
		c: function create() {
			section = element("section");
			div6 = element("div");
			header = element("header");
			img = element("img");
			t0 = space();
			div0 = element("div");
			h4 = element("h4");
			t1 = text(/*name*/ ctx[0]);
			t2 = space();
			div5 = element("div");
			div4 = element("div");
			div1 = element("div");
			if_block0.c();
			t3 = space();
			div2 = element("div");
			if_block1.c();
			t4 = space();
			div3 = element("div");
			span = element("span");
			t5 = space();
			a = element("a");
			t6 = text("View More");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div6 = claim_element(section_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			header = claim_element(div6_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			img = claim_element(header_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(header_nodes);
			div0 = claim_element(header_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h4 = claim_element(div0_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t1 = claim_text(h4_nodes, /*name*/ ctx[0]);
			h4_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t2 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", {});
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", {});
			var div1_nodes = children(div1);
			if_block0.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div4_nodes);
			div2 = claim_element(div4_nodes, "DIV", {});
			var div2_nodes = children(div2);
			if_block1.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", {});
			var div3_nodes = children(div3);

			span = claim_element(div3_nodes, "SPAN", {
				"uk-icon": true,
				title: true,
				class: true
			});

			children(span).forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			a = claim_element(div3_nodes, "A", { class: true });
			var a_nodes = children(a);
			t6 = claim_text(a_nodes, "View More");
			a_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*image*/ ctx[1])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*name*/ ctx[0]);
			attr_dev(img, "class", "svelte-1vzim64");
			add_location(img, file, 70, 6, 1167);
			attr_dev(h4, "class", "svelte-1vzim64");
			add_location(h4, file, 72, 8, 1275);
			attr_dev(div0, "class", "uk-overlay uk-overlay-primary uk-position-bottom svelte-1vzim64");
			add_location(div0, file, 71, 6, 1204);
			attr_dev(header, "class", "image uk-inline svelte-1vzim64");
			add_location(header, file, 69, 4, 1119);
			add_location(div1, file, 77, 8, 1364);
			add_location(div2, file, 86, 8, 1625);
			attr_dev(span, "uk-icon", "icon: info");
			attr_dev(span, "title", span_title_value = "View more information about " + /*name*/ ctx[0]);
			attr_dev(span, "class", "svelte-1vzim64");
			add_location(span, file, 95, 10, 1904);
			attr_dev(a, "class", "view-more svelte-1vzim64");
			add_location(a, file, 98, 10, 2011);
			add_location(div3, file, 94, 8, 1888);
			attr_dev(div4, "class", "details svelte-1vzim64");
			add_location(div4, file, 76, 6, 1334);
			add_location(div5, file, 75, 4, 1322);
			attr_dev(div6, "class", "card-container uk-box-shadow-medium svelte-1vzim64");
			add_location(div6, file, 68, 2, 1065);
			attr_dev(section, "class", "svelte-1vzim64");
			add_location(section, file, 67, 0, 1053);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div6);
			append_dev(div6, header);
			append_dev(header, img);
			append_dev(header, t0);
			append_dev(header, div0);
			append_dev(div0, h4);
			append_dev(h4, t1);
			append_dev(div6, t2);
			append_dev(div6, div5);
			append_dev(div5, div4);
			append_dev(div4, div1);
			if_block0.m(div1, null);
			append_dev(div4, t3);
			append_dev(div4, div2);
			if_block1.m(div2, null);
			append_dev(div4, t4);
			append_dev(div4, div3);
			append_dev(div3, span);
			append_dev(div3, t5);
			append_dev(div3, a);
			append_dev(a, t6);

			if (!mounted) {
				dispose = [
					listen_dev(header, "click", /*click_handler*/ ctx[5], false, false, false),
					listen_dev(a, "click", /*click_handler_1*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*image*/ 2 && img.src !== (img_src_value = /*image*/ ctx[1])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*name*/ 1) {
				attr_dev(img, "alt", /*name*/ ctx[0]);
			}

			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div1, null);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div2, null);
				}
			}

			if (dirty & /*name*/ 1 && span_title_value !== (span_title_value = "View more information about " + /*name*/ ctx[0])) {
				attr_dev(span, "title", span_title_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if_block0.d();
			if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let { image } = $$props;
	let { phone } = $$props;
	let { email } = $$props;
	const writable_props = ["name", "image", "phone", "email"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, []);

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("image" in $$props) $$invalidate(1, image = $$props.image);
		if ("phone" in $$props) $$invalidate(2, phone = $$props.phone);
		if ("email" in $$props) $$invalidate(3, email = $$props.email);
	};

	$$self.$capture_state = () => ({ name, image, phone, email });

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("image" in $$props) $$invalidate(1, image = $$props.image);
		if ("phone" in $$props) $$invalidate(2, phone = $$props.phone);
		if ("email" in $$props) $$invalidate(3, email = $$props.email);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, image, phone, email, click_handler_1, click_handler];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0, image: 1, phone: 2, email: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Card> was created without expected prop 'name'");
		}

		if (/*image*/ ctx[1] === undefined && !("image" in props)) {
			console.warn("<Card> was created without expected prop 'image'");
		}

		if (/*phone*/ ctx[2] === undefined && !("phone" in props)) {
			console.warn("<Card> was created without expected prop 'phone'");
		}

		if (/*email*/ ctx[3] === undefined && !("email" in props)) {
			console.warn("<Card> was created without expected prop 'email'");
		}
	}

	get name() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get image() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set image(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get phone() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set phone(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get email() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set email(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/ContactModal.svelte generated by Svelte v3.24.1 */

const file$1 = "src/components/ContactModal.svelte";

// (24:4) {#if linkedin}
function create_if_block$1(ctx) {
	let a;
	let span;

	const block = {
		c: function create() {
			a = element("a");
			span = element("span");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, target: true, title: true });
			var a_nodes = children(a);
			span = claim_element(a_nodes, "SPAN", { "uk-icon": true, ratio: true });
			children(span).forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "uk-icon", "icon: linkedin");
			attr_dev(span, "ratio", "1.5");
			add_location(span, file$1, 25, 8, 484);
			attr_dev(a, "href", /*linkedin*/ ctx[5]);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "title", "View on LinkedIn");
			add_location(a, file$1, 24, 6, 415);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, span);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*linkedin*/ 32) {
				attr_dev(a, "href", /*linkedin*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(24:4) {#if linkedin}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let h2;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let p1;
	let t4;
	let t5;
	let p2;
	let t6;
	let t7;
	let t8;
	let p3;
	let button;
	let t9;
	let if_block = /*linkedin*/ ctx[5] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text(/*nameOnModal*/ ctx[4]);
			t1 = space();
			p0 = element("p");
			t2 = text(/*bio1*/ ctx[1]);
			t3 = space();
			p1 = element("p");
			t4 = text(/*bio2*/ ctx[2]);
			t5 = space();
			p2 = element("p");
			t6 = text(/*bio3*/ ctx[3]);
			t7 = space();
			if (if_block) if_block.c();
			t8 = space();
			p3 = element("p");
			button = element("button");
			t9 = text("Close");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, "uk-modal": true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*nameOnModal*/ ctx[4]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, /*bio1*/ ctx[1]);
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, /*bio2*/ ctx[2]);
			p1_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			p2 = claim_element(div0_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t6 = claim_text(p2_nodes, /*bio3*/ ctx[3]);
			p2_nodes.forEach(detach_dev);
			t7 = claim_space(div0_nodes);
			if (if_block) if_block.l(div0_nodes);
			t8 = claim_space(div0_nodes);
			p3 = claim_element(div0_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			button = claim_element(p3_nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t9 = claim_text(button_nodes, "Close");
			button_nodes.forEach(detach_dev);
			p3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "uk-modal-title svelte-u9r0dk");
			add_location(h2, file$1, 18, 4, 289);
			attr_dev(p0, "class", "svelte-u9r0dk");
			add_location(p0, file$1, 20, 4, 340);
			attr_dev(p1, "class", "svelte-u9r0dk");
			add_location(p1, file$1, 21, 4, 358);
			attr_dev(p2, "class", "svelte-u9r0dk");
			add_location(p2, file$1, 22, 4, 376);
			attr_dev(button, "class", "uk-button uk-button-default uk-modal-close");
			attr_dev(button, "type", "button");
			add_location(button, file$1, 29, 6, 587);
			attr_dev(p3, "class", "uk-text-right svelte-u9r0dk");
			add_location(p3, file$1, 28, 4, 555);
			attr_dev(div0, "class", "uk-modal-dialog uk-modal-body");
			add_location(div0, file$1, 17, 2, 241);
			attr_dev(div1, "id", /*id*/ ctx[0]);
			attr_dev(div1, "uk-modal", "");
			add_location(div1, file$1, 16, 0, 219);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h2);
			append_dev(h2, t0);
			append_dev(div0, t1);
			append_dev(div0, p0);
			append_dev(p0, t2);
			append_dev(div0, t3);
			append_dev(div0, p1);
			append_dev(p1, t4);
			append_dev(div0, t5);
			append_dev(div0, p2);
			append_dev(p2, t6);
			append_dev(div0, t7);
			if (if_block) if_block.m(div0, null);
			append_dev(div0, t8);
			append_dev(div0, p3);
			append_dev(p3, button);
			append_dev(button, t9);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*nameOnModal*/ 16) set_data_dev(t0, /*nameOnModal*/ ctx[4]);
			if (dirty & /*bio1*/ 2) set_data_dev(t2, /*bio1*/ ctx[1]);
			if (dirty & /*bio2*/ 4) set_data_dev(t4, /*bio2*/ ctx[2]);
			if (dirty & /*bio3*/ 8) set_data_dev(t6, /*bio3*/ ctx[3]);

			if (/*linkedin*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div0, t8);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*id*/ 1) {
				attr_dev(div1, "id", /*id*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { bio1 } = $$props;
	let { bio2 } = $$props;
	let { bio3 } = $$props;
	let { nameOnModal } = $$props;
	let { linkedin } = $$props;
	const writable_props = ["id", "bio1", "bio2", "bio3", "nameOnModal", "linkedin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ContactModal> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ContactModal", $$slots, []);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("bio1" in $$props) $$invalidate(1, bio1 = $$props.bio1);
		if ("bio2" in $$props) $$invalidate(2, bio2 = $$props.bio2);
		if ("bio3" in $$props) $$invalidate(3, bio3 = $$props.bio3);
		if ("nameOnModal" in $$props) $$invalidate(4, nameOnModal = $$props.nameOnModal);
		if ("linkedin" in $$props) $$invalidate(5, linkedin = $$props.linkedin);
	};

	$$self.$capture_state = () => ({
		id,
		bio1,
		bio2,
		bio3,
		nameOnModal,
		linkedin
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("bio1" in $$props) $$invalidate(1, bio1 = $$props.bio1);
		if ("bio2" in $$props) $$invalidate(2, bio2 = $$props.bio2);
		if ("bio3" in $$props) $$invalidate(3, bio3 = $$props.bio3);
		if ("nameOnModal" in $$props) $$invalidate(4, nameOnModal = $$props.nameOnModal);
		if ("linkedin" in $$props) $$invalidate(5, linkedin = $$props.linkedin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [id, bio1, bio2, bio3, nameOnModal, linkedin];
}

class ContactModal extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			id: 0,
			bio1: 1,
			bio2: 2,
			bio3: 3,
			nameOnModal: 4,
			linkedin: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ContactModal",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<ContactModal> was created without expected prop 'id'");
		}

		if (/*bio1*/ ctx[1] === undefined && !("bio1" in props)) {
			console.warn("<ContactModal> was created without expected prop 'bio1'");
		}

		if (/*bio2*/ ctx[2] === undefined && !("bio2" in props)) {
			console.warn("<ContactModal> was created without expected prop 'bio2'");
		}

		if (/*bio3*/ ctx[3] === undefined && !("bio3" in props)) {
			console.warn("<ContactModal> was created without expected prop 'bio3'");
		}

		if (/*nameOnModal*/ ctx[4] === undefined && !("nameOnModal" in props)) {
			console.warn("<ContactModal> was created without expected prop 'nameOnModal'");
		}

		if (/*linkedin*/ ctx[5] === undefined && !("linkedin" in props)) {
			console.warn("<ContactModal> was created without expected prop 'linkedin'");
		}
	}

	get id() {
		throw new Error("<ContactModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<ContactModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bio1() {
		throw new Error("<ContactModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bio1(value) {
		throw new Error("<ContactModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bio2() {
		throw new Error("<ContactModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bio2(value) {
		throw new Error("<ContactModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bio3() {
		throw new Error("<ContactModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bio3(value) {
		throw new Error("<ContactModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nameOnModal() {
		throw new Error("<ContactModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nameOnModal(value) {
		throw new Error("<ContactModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get linkedin() {
		throw new Error("<ContactModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set linkedin(value) {
		throw new Error("<ContactModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/about.svelte generated by Svelte v3.24.1 */

const { console: console_1 } = globals;
const file$2 = "src/routes/about.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (76:2) {#each $aboutData as attorney}
function create_each_block(ctx) {
	let card;
	let t;
	let contactmodal;
	let current;

	card = new Card({
			props: {
				name: /*attorney*/ ctx[3].name,
				image: /*attorney*/ ctx[3].img,
				phone: /*attorney*/ ctx[3].phone,
				email: /*attorney*/ ctx[3].email,
				location: /*attorney*/ ctx[3].location,
				linkedin: /*attorney*/ ctx[3].linkedin,
				facebook: /*attorney*/ ctx[3].facebook,
				twitter: /*attorney*/ ctx[3].twitter,
				instagram: /*attorney*/ ctx[3].instagram
			},
			$$inline: true
		});

	card.$on("click", function () {
		if (is_function(showModal(/*attorney*/ ctx[3].modalName))) showModal(/*attorney*/ ctx[3].modalName).apply(this, arguments);
	});

	contactmodal = new ContactModal({
			props: {
				id: /*attorney*/ ctx[3].modalName,
				bio1: /*attorney*/ ctx[3].bio1,
				bio2: /*attorney*/ ctx[3].bio2,
				bio3: /*attorney*/ ctx[3].bio3,
				nameOnModal: /*attorney*/ ctx[3].nameOnModal,
				linkedin: /*attorney*/ ctx[3].linkedin
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
			t = space();
			create_component(contactmodal.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(card.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(contactmodal.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(contactmodal, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const card_changes = {};
			if (dirty & /*$aboutData*/ 1) card_changes.name = /*attorney*/ ctx[3].name;
			if (dirty & /*$aboutData*/ 1) card_changes.image = /*attorney*/ ctx[3].img;
			if (dirty & /*$aboutData*/ 1) card_changes.phone = /*attorney*/ ctx[3].phone;
			if (dirty & /*$aboutData*/ 1) card_changes.email = /*attorney*/ ctx[3].email;
			if (dirty & /*$aboutData*/ 1) card_changes.location = /*attorney*/ ctx[3].location;
			if (dirty & /*$aboutData*/ 1) card_changes.linkedin = /*attorney*/ ctx[3].linkedin;
			if (dirty & /*$aboutData*/ 1) card_changes.facebook = /*attorney*/ ctx[3].facebook;
			if (dirty & /*$aboutData*/ 1) card_changes.twitter = /*attorney*/ ctx[3].twitter;
			if (dirty & /*$aboutData*/ 1) card_changes.instagram = /*attorney*/ ctx[3].instagram;
			card.$set(card_changes);
			const contactmodal_changes = {};
			if (dirty & /*$aboutData*/ 1) contactmodal_changes.id = /*attorney*/ ctx[3].modalName;
			if (dirty & /*$aboutData*/ 1) contactmodal_changes.bio1 = /*attorney*/ ctx[3].bio1;
			if (dirty & /*$aboutData*/ 1) contactmodal_changes.bio2 = /*attorney*/ ctx[3].bio2;
			if (dirty & /*$aboutData*/ 1) contactmodal_changes.bio3 = /*attorney*/ ctx[3].bio3;
			if (dirty & /*$aboutData*/ 1) contactmodal_changes.nameOnModal = /*attorney*/ ctx[3].nameOnModal;
			if (dirty & /*$aboutData*/ 1) contactmodal_changes.linkedin = /*attorney*/ ctx[3].linkedin;
			contactmodal.$set(contactmodal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			transition_in(contactmodal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			transition_out(contactmodal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
			if (detaching) detach_dev(t);
			destroy_component(contactmodal, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(76:2) {#each $aboutData as attorney}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let t0;
	let div;
	let h2;
	let t1;
	let t2;
	let p;
	let t3;
	let div_intro;
	let t4;
	let section;
	let section_intro;
	let current;
	let each_value = /*$aboutData*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			h2 = element("h2");
			t1 = text("Meet Our Experienced Legal Team");
			t2 = space();
			p = element("p");
			t3 = text("All of our lawyers and experienced professional staff are focused on\n    providing you with first-rate legal representation and services, regardless\n    of the size or complexity of your case.");
			t4 = space();
			section = element("section");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1myew8g\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Meet Our Experienced Legal Team");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "All of our lawyers and experienced professional staff are focused on\n    providing you with first-rate legal representation and services, regardless\n    of the size or complexity of your case.");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(section_nodes);
			}

			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			attr_dev(h2, "class", "svelte-1oul2ab");
			add_location(h2, file$2, 66, 2, 1517);
			attr_dev(p, "class", "svelte-1oul2ab");
			add_location(p, file$2, 67, 2, 1560);
			attr_dev(div, "class", "header-container svelte-1oul2ab");
			add_location(div, file$2, 65, 0, 1444);
			attr_dev(section, "class", "svelte-1oul2ab");
			add_location(section, file$2, 74, 0, 1789);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t1);
			append_dev(div, t2);
			append_dev(div, p);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, section, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$aboutData, showModal*/ 1) {
				each_value = /*$aboutData*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(section, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fade, { duration: 400, delay: 100 });
					div_intro.start();
				});
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!section_intro) {
				add_render_callback(() => {
					section_intro = create_in_transition(section, fade, { duration: 400, delay: 100 });
					section_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function showModal(modalName) {
	console.log(modalName);
	UIkit.modal(`#${modalName}`).show();
}

function instance$2($$self, $$props, $$invalidate) {
	let $aboutData;
	validate_store(aboutData, "aboutData");
	component_subscribe($$self, aboutData, $$value => $$invalidate(0, $aboutData = $$value));
	let pageIsActive;

	// const unsubscribeLawyer = aboutData.subscribe(lawyer => {
	//   attorneys = lawyer;
	// });
	const unsubscribeNav = navStore.subscribe(activePage => {
		pageIsActive = activePage;
	});

	navStore.update(() => {
		return { activePage: "about" };
	});

	onDestroy(() => {
		if (unsubscribeNav) {
			unsubscribeNav();
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<About> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("About", $$slots, []);

	$$self.$capture_state = () => ({
		onDestroy,
		aboutData,
		fade,
		Card,
		Footer,
		ContactModal,
		navStore,
		pageIsActive,
		unsubscribeNav,
		showModal,
		$aboutData
	});

	$$self.$inject_state = $$props => {
		if ("pageIsActive" in $$props) pageIsActive = $$props.pageIsActive;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [$aboutData];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment$2.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
